{
  "fields": [
    {
      "block_on_first_violation": {
        "default": false,
        "description": "A boolean value that determines if the requests should be blocked as soon as one limit is being exceeded. This will block requests that are supposed to consume other limits too.",
        "required": true,
        "type": "boolean"
      }
    },
    {
      "fault_tolerant": {
        "default": true,
        "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party datastore. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the datastore is working again. If `false`, then the clients will see `500` errors.",
        "required": true,
        "type": "boolean"
      }
    },
    {
      "header_name": {
        "default": "x-kong-limit",
        "description": "The name of the response header used to increment the counters.",
        "type": "string"
      }
    },
    {
      "hide_client_headers": {
        "default": false,
        "description": "Optionally hide informative response headers.",
        "required": true,
        "type": "boolean"
      }
    },
    {
      "limit_by": {
        "default": "consumer",
        "description": "The entity that will be used when aggregating the limits: `consumer`, `credential`, `ip`. If the `consumer` or the `credential` cannot be determined, the system will always fallback to `ip`.",
        "one_of": [
          "consumer",
          "credential",
          "ip"
        ],
        "type": "string"
      }
    },
    {
      "limits": {
        "description": "A map that defines rate limits for the plugin.",
        "keys": {
          "type": "string"
        },
        "len_min": 1,
        "required": true,
        "type": "map",
        "values": {
          "entity_checks": [
            {
              "at_least_one_of": [
                "day",
                "hour",
                "minute",
                "month",
                "second",
                "year"
              ]
            }
          ],
          "fields": [
            {
              "day": {
                "gt": 0,
                "type": "number"
              }
            },
            {
              "hour": {
                "gt": 0,
                "type": "number"
              }
            },
            {
              "minute": {
                "gt": 0,
                "type": "number"
              }
            },
            {
              "month": {
                "gt": 0,
                "type": "number"
              }
            },
            {
              "second": {
                "gt": 0,
                "type": "number"
              }
            },
            {
              "year": {
                "gt": 0,
                "type": "number"
              }
            }
          ],
          "required": true,
          "type": "record"
        }
      }
    },
    {
      "policy": {
        "default": "local",
        "description": "The rate-limiting policies to use for retrieving and incrementing the limits.",
        "one_of": [
          "cluster",
          "local",
          "redis"
        ],
        "type": "string"
      }
    },
    {
      "redis": {
        "description": "Redis configuration",
        "fields": [
          {
            "database": {
              "default": 0,
              "description": "Database to use for the Redis connection when using the `redis` strategy",
              "type": "integer"
            }
          },
          {
            "host": {
              "description": "A string representing a host name, such as example.com.",
              "type": "string"
            }
          },
          {
            "password": {
              "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
              "encrypted": true,
              "len_min": 0,
              "referenceable": true,
              "type": "string"
            }
          },
          {
            "port": {
              "between": [
                0,
                65535
              ],
              "default": 6379,
              "description": "An integer representing a port number between 0 and 65535, inclusive.",
              "type": "integer"
            }
          },
          {
            "server_name": {
              "description": "A string representing an SNI (server name indication) value for TLS.",
              "required": false,
              "type": "string"
            }
          },
          {
            "ssl": {
              "default": false,
              "description": "If set to true, uses SSL to connect to Redis.",
              "required": false,
              "type": "boolean"
            }
          },
          {
            "ssl_verify": {
              "default": false,
              "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
              "required": false,
              "type": "boolean"
            }
          },
          {
            "timeout": {
              "between": [
                0,
                2147483646
              ],
              "default": 2000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "type": "integer"
            }
          },
          {
            "username": {
              "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
              "referenceable": true,
              "type": "string"
            }
          }
        ],
        "required": true,
        "type": "record"
      }
    }
  ],
  "required": true,
  "shorthand_fields": [
    {
      "redis_database": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_database is deprecated, please use config.redis.database instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "database",
                "redis"
              ]
            }
          ]
        },
        "type": "integer"
      }
    },
    {
      "redis_host": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_host is deprecated, please use config.redis.host instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "host",
                "redis"
              ]
            }
          ]
        },
        "type": "string"
      }
    },
    {
      "redis_password": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_password is deprecated, please use config.redis.password instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "password",
                "redis"
              ]
            }
          ]
        },
        "len_min": 0,
        "type": "string"
      }
    },
    {
      "redis_port": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_port is deprecated, please use config.redis.port instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "port",
                "redis"
              ]
            }
          ]
        },
        "type": "integer"
      }
    },
    {
      "redis_server_name": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_server_name is deprecated, please use config.redis.server_name instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "redis",
                "server_name"
              ]
            }
          ]
        },
        "type": "string"
      }
    },
    {
      "redis_ssl": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_ssl is deprecated, please use config.redis.ssl instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "redis",
                "ssl"
              ]
            }
          ]
        },
        "type": "boolean"
      }
    },
    {
      "redis_ssl_verify": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_ssl_verify is deprecated, please use config.redis.ssl_verify instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "redis",
                "ssl_verify"
              ]
            }
          ]
        },
        "type": "boolean"
      }
    },
    {
      "redis_timeout": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_timeout is deprecated, please use config.redis.timeout instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "redis",
                "timeout"
              ]
            }
          ]
        },
        "type": "integer"
      }
    },
    {
      "redis_username": {
        "deprecation": {
          "message": "response-ratelimiting: config.redis_username is deprecated, please use config.redis.username instead",
          "removal_in_version": "4.0",
          "replaced_with": [
            {
              "path": [
                "redis",
                "username"
              ]
            }
          ]
        },
        "type": "string"
      }
    }
  ],
  "type": "record"
}