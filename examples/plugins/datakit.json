{
  "fields": [
    {
      "debug": {
        "default": false,
        "required": false,
        "type": "boolean"
      }
    },
    {
      "nodes": {
        "elements": {
          "description": "datakit nodes",
          "fields": [
            {
              "name": {
                "description": "A label that uniquely identifies the node within the plugin configuration so that it can be used for input/output connections. Must be valid `snake_case` or `kebab-case`.",
                "examples": [
                  {
                    "value": "filter_01"
                  },
                  {
                    "value": "filter_02"
                  },
                  {
                    "value": "get-property"
                  },
                  {
                    "value": "kebab-case"
                  },
                  {
                    "value": "KEBAB-CASE"
                  },
                  {
                    "value": "SCREAMING_SNAKE_CASE"
                  },
                  {
                    "value": "send_api_request"
                  },
                  {
                    "value": "set-property"
                  },
                  {
                    "value": "snake_case"
                  }
                ],
                "len_max": 255,
                "len_min": 1,
                "match_all": [
                  {
                    "err": "must be a valid identifier",
                    "pattern": "^[A-Za-z_][A-Za-z0-9_-]*$"
                  }
                ],
                "match_none": [
                  {
                    "err": "reserved node name",
                    "pattern": "^_$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^context$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^ctx$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^error$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^globals$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^kong$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^ngx$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^node$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^plan$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^plugin$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^property$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^self$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^static$"
                  },
                  {
                    "err": "reserved node name",
                    "pattern": "^vars$"
                  }
                ],
                "not_one_of": [
                  "request",
                  "response",
                  "service_request",
                  "service_response"
                ],
                "required": true,
                "type": "string"
              }
            },
            {
              "type": {
                "one_of": [
                  "call",
                  "exit",
                  "jq",
                  "property",
                  "static"
                ],
                "required": true,
                "type": "string"
              }
            }
          ],
          "subschema_definitions": {
            "call": {
              "description": "Make an external HTTP request",
              "entity_checks": [
                {
                  "mutually_exclusive": [
                    "input",
                    "inputs"
                  ]
                },
                {
                  "mutually_exclusive": [
                    "output",
                    "outputs"
                  ]
                }
              ],
              "fields": [
                {
                  "input": {
                    "description": "call node input",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "inputs": {
                    "description": "call node inputs",
                    "fields": [
                      {
                        "body": {
                          "description": "HTTP request body",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "headers": {
                          "description": "HTTP request headers",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "query": {
                          "description": "HTTP request query",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      }
                    ],
                    "required": false,
                    "type": "record"
                  }
                },
                {
                  "method": {
                    "default": "GET",
                    "description": "A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.",
                    "len_max": 32,
                    "len_min": 1,
                    "match": "^%u+$",
                    "type": "string"
                  }
                },
                {
                  "output": {
                    "description": "call node output",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "outputs": {
                    "description": "call node outputs",
                    "fields": [
                      {
                        "body": {
                          "description": "HTTP response body",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "headers": {
                          "description": "HTTP response headers",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "status": {
                          "description": "HTTP response status code",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      }
                    ],
                    "required": false,
                    "type": "record"
                  }
                },
                {
                  "ssl_server_name": {
                    "description": "A string representing an SNI (server name indication) value for TLS.",
                    "type": "string"
                  }
                },
                {
                  "timeout": {
                    "between": [
                      0,
                      2147483646
                    ],
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "type": "integer"
                  }
                },
                {
                  "url": {
                    "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.",
                    "required": true,
                    "type": "string"
                  }
                }
              ],
              "type": "record"
            },
            "exit": {
              "description": "Terminate the request and send a response to the client",
              "entity_checks": [
                {
                  "mutually_exclusive": [
                    "input",
                    "inputs"
                  ]
                }
              ],
              "fields": [
                {
                  "input": {
                    "description": "exit node input",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "inputs": {
                    "description": "exit node inputs",
                    "fields": [
                      {
                        "body": {
                          "description": "HTTP response body",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "headers": {
                          "description": "HTTP response headers",
                          "len_max": 255,
                          "len_min": 1,
                          "match_any": {
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                              "^[A-Za-z_][A-Za-z0-9_-]*$"
                            ]
                          },
                          "required": false,
                          "type": "string"
                        }
                      }
                    ],
                    "required": false,
                    "type": "record"
                  }
                },
                {
                  "status": {
                    "between": [
                      200,
                      599
                    ],
                    "default": 200,
                    "description": "HTTP status code",
                    "required": false,
                    "type": "integer"
                  }
                },
                {
                  "warn_headers_sent": {
                    "required": false,
                    "type": "boolean"
                  }
                }
              ],
              "type": "record"
            },
            "jq": {
              "description": "Process data using `jq` syntax",
              "entity_checks": [
                {
                  "mutually_exclusive": [
                    "input",
                    "inputs"
                  ]
                }
              ],
              "fields": [
                {
                  "input": {
                    "description": "filter input(s)",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "inputs": {
                    "description": "filter input(s)",
                    "keys": {
                      "len_max": 255,
                      "len_min": 1,
                      "type": "string"
                    },
                    "required": false,
                    "type": "map",
                    "values": {
                      "len_max": 255,
                      "len_min": 1,
                      "match_any": {
                        "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                        "patterns": [
                          "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                          "^[A-Za-z_][A-Za-z0-9_-]*$"
                        ]
                      },
                      "type": "string"
                    }
                  }
                },
                {
                  "jq": {
                    "description": "The jq filter text. Refer to https://jqlang.org/manual/ for full documentation.",
                    "len_max": 10240,
                    "len_min": 1,
                    "required": true,
                    "type": "string"
                  }
                },
                {
                  "output": {
                    "description": "filter output(s)",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                }
              ],
              "type": "record"
            },
            "property": {
              "description": "Get or set a property",
              "fields": [
                {
                  "content_type": {
                    "description": "The expected mime type of the property value. When set to `application/json`, SET operations will JSON-encode input data before writing it, and GET operations will JSON-decode output data after reading it. Otherwise, this setting has no effect.",
                    "one_of": [
                      "application/json",
                      "application/octet-stream",
                      "text/plain"
                    ],
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "input": {
                    "description": "Property input source. When connected, this node operates in SET mode and writes input data to the property. Otherwise, the node operates in GET mode and reads the property.",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "output": {
                    "description": "Property output. This can be connected regardless of whether the node is operating in GET mode or SET mode.",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "property": {
                    "description": "The property name to get/set",
                    "len_max": 255,
                    "len_min": 1,
                    "required": true,
                    "type": "string"
                  }
                }
              ],
              "type": "record"
            },
            "static": {
              "description": "Produce reusable outputs from statically-configured values",
              "entity_checks": [
                {
                  "mutually_exclusive": [
                    "output",
                    "outputs"
                  ]
                }
              ],
              "fields": [
                {
                  "output": {
                    "description": "The entire `.values` map",
                    "len_max": 255,
                    "len_min": 1,
                    "match_any": {
                      "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                      "patterns": [
                        "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                        "^[A-Za-z_][A-Za-z0-9_-]*$"
                      ]
                    },
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "outputs": {
                    "description": "Individual items from `.values`, referenced by key",
                    "keys": {
                      "len_max": 255,
                      "len_min": 1,
                      "type": "string"
                    },
                    "required": false,
                    "type": "map",
                    "values": {
                      "len_max": 255,
                      "len_min": 1,
                      "match_any": {
                        "err": "must be one of NODE_NAME or NODE_NAME.FIELD",
                        "patterns": [
                          "^[A-Za-z_][A-Za-z0-9_-]*%..+$",
                          "^[A-Za-z_][A-Za-z0-9_-]*$"
                        ]
                      },
                      "type": "string"
                    }
                  }
                },
                {
                  "values": {
                    "description": "An object with string keys and freeform values",
                    "json_schema": {
                      "inline": {
                        "type": "object"
                      }
                    },
                    "required": true,
                    "type": "json"
                  }
                }
              ],
              "type": "record"
            }
          },
          "subschema_error": "unknown node type: %q, expected one of: call, exit, jq, property, static",
          "subschema_key": "type",
          "subschema_override_parent": true,
          "type": "record"
        },
        "len_max": 64,
        "len_min": 1,
        "required": true,
        "type": "array"
      }
    }
  ],
  "required": true,
  "type": "record"
}